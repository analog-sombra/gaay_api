# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddDoctorInput {
  doctorid: Int!
  id: Int!
  scheduled_date: DateTime!
}

enum BeneficiaryType {
  IDDP
  SSDU
}

type Birth {
  calfid: Int!
  createdAt: DateTime!
  createdById: Int!
  deletedAt: DateTime
  deletedById: Int
  fathercowid: String
  id: Int!
  mothercowid: Int!
  remarks: String!
  status: Status!
  updatedAt: DateTime!
  updatedById: Int!
}

type Breed {
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

enum Category {
  GENERAL
  OBC
  OTHERS
  SCST
}

input CompleteMedicalInput {
  follow_up_date: DateTime!
  follow_up_treatment: String!
  id: Int!
  treatment_provided: String!
  user_id: Int!
}

type Cow {
  alias: String!
  birthdate: DateTime!
  breed: Breed!
  breedid: Int!
  calf_birth: [Birth!]!
  cow_health_report: [Healthreport!]!
  cowname: String!
  cowstatus: CowStatus!
  cowtagno: String!
  createdAt: DateTime!
  createdById: Int!
  daily_milk_produce: String
  death_date: DateTime
  death_reason: String
  deletedAt: DateTime
  deletedById: Int
  farmer: User!
  farmerid: Int!
  id: Int!
  insurance: [Insurance!]!
  mothercow_birth: [Birth!]!
  noofcalves: Int
  photo1: String
  photo2: String
  photo3: String
  photo4: String
  photocover: String!
  purchased_contact: String
  purchased_date: DateTime
  purchased_from: String
  purchased_price: String
  remarks: String
  sex: SEX!
  sold_contact: String
  sold_date: DateTime
  sold_price: String
  sold_to: String
  status: Status!
  updatedAt: DateTime!
  updatedById: Int!
  weight: String!
}

type CowPagination {
  data: [Cow!]!
  skip: Int!
  take: Int!
  total: Int!
}

type CowReportData {
  Beneficiary_Contact: String!
  alias: String!
  beneficiary_code: String!
  beneficiary_type: String
  birthdate: DateTime!
  bull_calves: Int!
  cow_count: Int
  cowname: String!
  cowstatus: CowStatus!
  cowtagno: String!
  daily_milk_produce: String!
  death_date: DateTime
  death_reason: String
  heifer_calves: Int!
  mother_cowtagno: String
  mother_id: Int
  name: String!
  no_of_calves: Int!
  sex: String!
  weight: String!
}

enum CowStatus {
  ALIVE
  DEAD
  SOLD
}

input CreateBirthInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateBreedInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateCowCalfInput {
  alias: String!
  birthdate: DateTime!
  black_quarter_date: DateTime
  breedid: Int!
  brucellossis_date: DateTime
  cowid: Int!
  cowname: String!
  cowstatus: CowStatus!
  cowtagno: String!
  createdById: Int!
  daily_milk_produce: String
  death_date: DateTime
  farmerid: Int!
  fathercowid: String!
  food_and_mouth_date: DateTime
  heat_period: DateTime
  hemorrhagic_septicemia_date: DateTime
  insurance_amount: String
  insurance_date: DateTime
  insurance_id: String
  insurance_name: String
  insurance_renewal_amount: String
  insurance_renewal_date: DateTime
  insurance_type: String
  last_calf_birthdate: DateTime
  last_deworming_date: DateTime
  last_sickness_date: DateTime
  last_treatment_date: DateTime
  last_vaccine_date: DateTime
  noofcalves: Int!
  photo1: String
  photo2: String
  photo3: String
  photo4: String
  photocover: String!
  premium_amount: String
  purchased_contact: String
  purchased_date: DateTime
  purchased_from: String
  purchased_price: String
  remarks: String
  sex: SEX!
  sold_contact: String
  sold_date: DateTime
  sold_price: String
  sold_to: String
  status: Status!
  weight: String!
}

input CreateCowInput {
  alias: String!
  birthdate: DateTime!
  black_quarter_date: DateTime
  breedid: Int!
  brucellossis_date: DateTime
  cowname: String!
  cowstatus: CowStatus!
  cowtagno: String!
  createdById: Int!
  daily_milk_produce: String
  death_date: DateTime
  farmerid: Int!
  food_and_mouth_date: DateTime
  heat_period: DateTime
  hemorrhagic_septicemia_date: DateTime
  insurance_amount: String
  insurance_date: DateTime
  insurance_id: String
  insurance_name: String
  insurance_renewal_amount: String
  insurance_renewal_date: DateTime
  insurance_type: String
  last_calf_birthdate: DateTime
  last_deworming_date: DateTime
  last_sickness_date: DateTime
  last_treatment_date: DateTime
  last_vaccine_date: DateTime
  noofcalves: Int!
  photo1: String
  photo2: String
  photo3: String
  photo4: String
  photocover: String!
  premium_amount: String
  purchased_contact: String
  purchased_date: DateTime
  purchased_from: String
  purchased_price: String
  remarks: String
  sex: SEX!
  sold_contact: String
  sold_date: DateTime
  sold_price: String
  sold_to: String
  status: Status!
  weight: String!
}

input CreateFeedbackInput {
  createdById: Int!
  description: String!
  happy: Boolean!
  status: Status!
  suggestion: String!
}

input CreateFoodInput {
  composition: String
  cover: String!
  createdById: Int!
  description: String!
  large_description: String
  manufacturer: String
  mrp: String!
  name: String!
  pack_size: String
  photo1: String
  photo2: String
  photo3: String
  photo4: String
  photo5: String
  purchase_price: String!
  purpose: String!
  sale_price: String
  size: String!
  size_unit: SizeUnit!
  status: Status!
}

input CreateHealthreportInput {
  black_quarter_date: DateTime
  brucellossis_date: DateTime
  cowid: Int!
  createdById: Int!
  food_and_mouth_date: DateTime
  heat_period: DateTime
  hemorrhagic_septicemia_date: DateTime
  last_calf_birthdate: DateTime
  last_deworming_date: DateTime
  last_sickness_date: DateTime
  last_treatment_date: DateTime
  last_vaccine_date: DateTime
}

input CreateMarketInput {
  cowid: Int!
  farmerid: Int!
  price: String!
  remarks: String!
  status: Status!
  verified: Boolean!
}

input CreateMedicalInput {
  cowid: Int!
  farmerid: Int!
  reason: String!
}

input CreateMedicineInput {
  composition: String
  cover: String!
  createdById: Int!
  description: String!
  dosage: String
  large_description: String
  manufacturer: String
  mrp: String!
  name: String!
  pack_size: String
  photo1: String
  photo2: String
  photo3: String
  photo4: String
  photo5: String
  purchase_price: String!
  purpose: String!
  sale_price: String
  size: String!
  size_unit: SizeUnit!
  status: Status!
}

input CreateStaffInput {
  address: String!
  alias: String!
  contact: String!
  contact_two: String
  district: String!
  name: String!
  role: Role!
  village: String!
}

input CreateUserInput {
  address: String!
  alias: String!
  beneficiary_code: String!
  beneficiary_type: BeneficiaryType!
  contact: String!
  contact_two: String
  cow_count: Int!
  district: String!
  name: String!
  occupation: String
  role: Role!
  village: String!
}

input CreateUserLoanInput {
  amount: String!
  emi_amount: String!
  start_date: String!
}

input CreateVaccinationInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

type DashboardCowReportData {
  alive: Int!
  calf: Int!
  cow_alive: Int!
  cow_dead: Int!
  dead: Int!
  heifer: Int!
  sold: Int!
  total: Int!
}

type DashboardData {
  cows: Int!
  medical: Int!
  user: Int!
  venders: Int!
}

type DashboardMedicalReportData {
  completed: Int!
  create: Int!
  late: Int!
  schedule: Int!
  total: Int!
}

type DashboardUserReportData {
  iddp: Int!
  iddp_cow_count: Int!
  ssdu: Int!
  ssdu_cow_count: Int!
  total: Int!
  withcows: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Feedback {
  createdAt: DateTime!
  createdById: Int!
  deletedAt: DateTime
  deletedById: Int
  description: String!
  happy: Boolean!
  id: Int!
  status: Status!
  suggestion: String!
  updatedAt: DateTime!
  updatedById: Int!
}

type Food {
  composition: String
  cover: String!
  createdAt: DateTime!
  createdById: Int!
  deletedAt: DateTime
  deletedById: Int!
  description: String!
  id: Int!
  large_description: String
  manufacturer: String
  mrp: String!
  name: String!
  pack_size: String
  photo1: String
  photo2: String
  photo3: String
  photo4: String
  photo5: String
  purchase_price: String!
  purpose: String!
  sale_price: String
  size: String!
  size_unit: SizeUnit!
  status: Status!
  updatedAt: DateTime!
  updatedById: Int
}

type FoodPagination {
  data: [Food!]!
  skip: Int!
  take: Int!
  total: Int!
}

type Healthreport {
  black_quarter_date: DateTime
  brucellossis_date: DateTime
  cow: Cow
  cowid: Int!
  food_and_mouth_date: DateTime
  heat_period: DateTime
  hemorrhagic_septicemia_date: DateTime
  id: Int!
  last_calf_birthdate: DateTime
  last_deworming_date: DateTime
  last_sickness_date: DateTime
  last_treatment_date: DateTime
  last_vaccine_date: DateTime
}

type Insurance {
  cowid: Int!
  createdAt: DateTime!
  createdById: Int!
  deletedAt: DateTime
  deletedById: Int
  id: Int!
  insurance_amount: String
  insurance_date: DateTime
  insurance_id: String
  insurance_name: String
  insurance_renewal_amount: String
  insurance_renewal_date: DateTime
  insurance_type: String
  premium_amount: String
  status: Status!
  updatedAt: DateTime!
  updatedById: Int!
}

enum Learn {
  FOOD
  HEALTH
  MEDICINE
}

type LearnData {
  cover: String!
  createdAt: DateTime!
  deletedAt: DateTime
  description: String!
  id: Int!
  link: String!
  title: String!
  type: Learn!
  updatedAt: DateTime!
}

type LearnPagination {
  data: [LearnData!]!
  skip: Int!
  take: Int!
  total: Int!
}

type Loan {
  amount: String!
  createdAt: DateTime!
  deletedAt: DateTime
  emi_amount: String!
  emi_date: DateTime!
  end_date: DateTime!
  farmer: User
  farmerid: Int!
  id: Int!
  loan_id: String!
  remark: String!
  start_date: DateTime!
  status: Status!
  updatedAt: DateTime!
}

input LoginUserInput {
  code: String!
  password: String!
}

type Market {
  cow: Cow
  cowid: Int!
  createdAt: DateTime!
  createdById: Int!
  deletedAt: DateTime
  deletedById: Int!
  farmer: User
  farmerid: Int!
  id: Int!
  listingdate: DateTime!
  price: String!
  remarks: String!
  status: Status!
  updatedAt: DateTime!
  updatedById: Int
  verified: Boolean!
}

type MarketPagination {
  data: [Market!]!
  skip: Int!
  take: Int!
  total: Int!
}

type Medical {
  complaint_no: String!
  cow: Cow
  cowid: Int!
  createdAt: DateTime!
  createdById: Int!
  date: DateTime!
  deletedAt: DateTime
  deletedById: Int!
  doctor: User
  doctorid: Int
  farmer: User
  farmerid: Int!
  follow_up_date: DateTime
  follow_up_treatment: String
  id: Int!
  medicalStatus: MedicalStatus!
  reason: String!
  remarks: String
  scheduled_date: DateTime
  status: Status!
  treatment_provided: String
  type: RequestType!
  updatedAt: DateTime!
  updatedById: Int
}

type MedicalPagination {
  data: [Medical!]!
  skip: Int!
  take: Int!
  total: Int!
}

enum MedicalStatus {
  CANCELLED
  CREATED
  POSTPONED
  REJECTED
  RESOLVED
  SCHEDULED
}

type Medicine {
  composition: String
  cover: String!
  createdAt: DateTime!
  createdById: Int!
  deletedAt: DateTime
  deletedById: Int!
  description: String!
  dosage: String
  id: Int!
  large_description: String
  manufacturer: String
  mrp: String!
  name: String!
  pack_size: String
  photo1: String
  photo2: String
  photo3: String
  photo4: String
  photo5: String
  purchase_price: String!
  purpose: String!
  sale_price: String
  size: String!
  size_unit: SizeUnit!
  status: Status!
  updatedAt: DateTime!
  updatedById: Int
}

type MedicinePagination {
  data: [Medicine!]!
  skip: Int!
  take: Int!
  total: Int!
}

type MonthData {
  count: Int!
  month: String!
}

type Mutation {
  addDoctor(addDoctorInput: AddDoctorInput!): Medical!
  addMarketCow(createMarketInput: CreateMarketInput!): Market!
  completeMedicalRequest(completeMedicalInput: CompleteMedicalInput!): Medical!
  createBirth(createBirthInput: CreateBirthInput!): Birth!
  createBreed(createBreedInput: CreateBreedInput!): Breed!
  createCow(createCowInput: CreateCowInput!): Cow!
  createCowCalf(createCowCalfInput: CreateCowCalfInput!): Cow!
  createFeedback(createFeedbackInput: CreateFeedbackInput!): Feedback!
  createHealthreport(createHealthreportInput: CreateHealthreportInput!): Healthreport!
  createMarketFood(createFoodInput: CreateFoodInput!): Food!
  createMarketMedicine(createMedicineInput: CreateMedicineInput!): Medicine!
  createMedical(createMedicalInput: CreateMedicalInput!): Medical!
  createStaff(createStaffInput: CreateStaffInput!): User!
  createUser(createUserInput: CreateUserInput!, createUserLoanInput: CreateUserLoanInput!): User!
  createVaccination(createVaccinationInput: CreateVaccinationInput!): Vaccination!
  deleteUser(id: Int!): User!
  editUserPhoto(id: Int!, photo: String!): User!
  removeBirth(id: Int!): Birth!
  removeBreed(id: Int!): Breed!
  searchCows(searchCowPaginationInput: SearchCowPaginationInput!): CowPagination!
  searchLearn(searchLearnPaginationInput: SearchLearnPaginationInput!): LearnPagination!
  searchMedicalRequest(searchMedicalPaginationInput: SearchMedicalPaginationInput!): MedicalPagination!
  searchUsers(searchUserPaginationInput: SearchUserPaginationInput!): UserPagination!
  searchUsersByRole(role: [String!]!): [User!]!
  sendOtp(code: String!): User!
  signup(signUpUserInput: SignUpUserInput!): User!
  updateBirth(updateBirthInput: UpdateBirthInput!): Birth!
  updateBreed(updateBreedInput: UpdateBreedInput!): Breed!
  updateCow(updateCowInput: UpdateCowInput!): Cow!
  verifyOtp(otpInput: OtpInput!): User!
}

input OtpInput {
  code: String!
  otp: String!
}

type Query {
  birth(id: Int!): Birth!
  breed(id: Int!): Breed!
  codeLogin(code: String!): User!
  cowReport: [CowReportData!]!
  dashboardCowReport: DashboardCowReportData!
  dashboardMedicalReport: DashboardMedicalReportData!
  dashboardUserReport: DashboardUserReportData!
  getAllLearn: [LearnData!]!
  getAllMarketCowByUser(id: Int!): [Market!]!
  getCowById(id: Int!): Cow!
  getDashbordData: DashboardData!
  getDoctorMedicalRequest(id: Int!, type: String!): [Medical!]!
  getFarmerByCode(code: String!): User!
  getMarketCow: [Market!]!
  getMarketCowByUser(id: Int!, skip: Int!, take: Int!): MarketPagination!
  getMarketFood: [Food!]!
  getMarketFoodByUser(id: Int!, skip: Int!, take: Int!): FoodPagination!
  getMarketMedicine: [Medicine!]!
  getMarketMedicineByUser(id: Int!, skip: Int!, take: Int!): MedicinePagination!
  getMedicalRequestById(id: Int!): Medical!
  getUserById(id: Int!): User!
  getUserCode: String!
  getUserCows(id: Int!): [Cow!]!
  getUserCurrentLoan(id: Int!): Loan!
  latestCow: Cow!
  latestFarmer: User!
  latestMedicalRequest: Medical!
  login(loginUserInput: LoginUserInput!): User!
  signIn(signInUserInput: SignInUserInput!): User!
  treatmentGraph(year: String!): TreatmentData!
  userReport: [UserReportData!]!
}

enum RequestType {
  FOLLOWUP
  MEDICAL
  SELFASSESSED
}

enum Role {
  ACCOUNTS
  ADMIN
  ANIMALHUSBANDRY
  DOCTOR
  DYCOLL
  FARMER
  SCSCT
  SELLERCOW
  SELLERFODDER
  SELLERMEDICINE
  STOCKMEN
  SYSTEM
}

enum SEX {
  FEMALE
  MALE
}

input SearchCowPaginationInput {
  search: String
  skip: Int!
  take: Int!
}

input SearchLearnPaginationInput {
  learn: Learn
  search: String
  skip: Int!
  take: Int!
}

input SearchMedicalPaginationInput {
  search: String
  skip: Int!
  take: Int!
}

input SearchUserPaginationInput {
  roles: [Role!]
  search: String
  skip: Int!
  take: Int!
}

input SignInUserInput {
  mobile: String!
  password: String!
}

input SignUpUserInput {
  mobile: String!
  name: String!
  password: String!
}

enum SizeUnit {
  GRAM
  KG
  LITRE
  ML
  PIECE
}

enum Status {
  ACTIVE
  INACTIVE
  NONE
}

type TreatmentData {
  monthlyData: [MonthData!]!
}

input UpdateBirthInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateBreedInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateCowInput {
  alias: String!
  birthdate: DateTime!
  black_quarter_date: DateTime
  breedid: Int!
  brucellossis_date: DateTime
  cowname: String!
  cowstatus: CowStatus!
  cowtagno: String!
  createdById: Int
  daily_milk_produce: String
  death_date: DateTime
  farmerid: Int!
  food_and_mouth_date: DateTime
  heat_period: DateTime
  hemorrhagic_septicemia_date: DateTime
  id: Int!
  insurance_amount: String
  insurance_date: DateTime
  insurance_id: String
  insurance_name: String
  insurance_renewal_amount: String
  insurance_renewal_date: DateTime
  insurance_type: String
  last_calf_birthdate: DateTime
  last_deworming_date: DateTime
  last_sickness_date: DateTime
  last_treatment_date: DateTime
  last_vaccine_date: DateTime
  noofcalves: Int!
  photo1: String
  photo2: String
  photo3: String
  photo4: String
  photocover: String!
  premium_amount: String
  purchased_contact: String
  purchased_date: DateTime
  purchased_from: String
  purchased_price: String
  remarks: String
  sex: SEX!
  sold_contact: String
  sold_date: DateTime
  sold_price: String
  sold_to: String
  status: Status!
  updatedById: Int!
  weight: String!
}

type User {
  address: String
  alias: String
  beneficiary_code: String
  beneficiary_type: BeneficiaryType
  category: Category!
  contact: String!
  contact_two: String
  cow_count: Int
  createdAt: DateTime!
  deletedAt: DateTime
  district: String
  id: Int!
  name: String!
  occupation: String
  password: String
  photo: String
  remark: String
  role: Role!
  status: Status!
  updatedAt: DateTime!
  village: String
}

type UserPagination {
  data: [User!]!
  skip: Int!
  take: Int!
  total: Int!
}

type UserReportData {
  address: String!
  alias: String
  alive_cows: Int!
  amount: String
  beneficiary_code: String!
  beneficiary_type: String!
  contact: String!
  contact_two: String
  dead_cows: Int!
  district: String!
  emi_amount: String
  emi_date: DateTime
  end_date: DateTime
  loan_id: String
  name: String!
  no_of_calves: Int!
  number_of_cows: Int!
  number_of_female_calves: Int!
  number_of_male_calves: Int!
  sold_cows: Int!
  start_date: DateTime
  status: String!
  village: String!
}

type Vaccination {
  alias: String!
  birthdate: DateTime!
  breed: Breed!
  breedid: Int!
  cowname: String!
  cowtagno: String!
  createdAt: DateTime!
  createdById: Int!
  daily_milk_produce: String
  deletedAt: DateTime
  deletedById: Int
  farmerid: Int!
  heat_period: String
  id: Int!
  last_calf_birthdate: DateTime
  last_deworming_date: DateTime
  last_treatment_date: DateTime
  last_vaccine_date: DateTime
  noofcalves: Int
  photo1: String
  photo2: String
  photo3: String
  photo4: String
  photocover: String!
  purchased_contact: String
  purchased_date: DateTime
  purchased_from: String
  purchased_price: String
  remarks: String
  sex: SEX!
  status: Status!
  updatedAt: DateTime!
  updatedById: Int!
  weight: String!
}